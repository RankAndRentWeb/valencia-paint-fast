---
import readingTime from "reading-time";

const { entry, categoryName } = Astro.props;
const { Content } = await entry.render();
const data = entry.data; // Don't destructure data from render(), use entry.data

// Reading time calculation
const rt = entry.body ? readingTime(entry.body) : { text: "" };

// Manejo seguro de la fecha
let date: Date | undefined;
try {
  if (data?.date) {
    date = data.date instanceof Date ? data.date : new Date(data.date);
    if (isNaN(date.getTime())) {
      date = undefined;
    }
  }
} catch (error) {
  date = undefined;
}
---

<!-- Migas, tags, título, meta, cover -->
<section class="container mx-auto px-4 pt-6 pb-4">
  <nav class="text-sm text-gray-500 mb-3">
    <a href="/blogs/" class="hover:underline">Blog</a>
    <span class="mx-1">›</span>
    <a href={`/blogs/${entry.slug.split('/')[0]}/`} class="hover:underline">{categoryName}</a>
    <span class="mx-1">›</span>
    <span class="text-gray-700">{data.title}</span>
  </nav>

    {data?.tags && data.tags.length > 0 && (
    <div class="flex flex-wrap gap-2 mb-2">
      {data?.tags?.map((t: string) => (
        <span class="px-3 py-1 rounded-full border text-gray-700 bg-gray-50 text-sm">{t}</span>
      ))}
    </div>
  )}

  <h1 class="text-4xl md:text-5xl font-extrabold text-gray-800 mb-3">{data?.title || 'Sin título'}</h1>

  {(date || rt?.text) && (
    <div class="flex items-center gap-4 text-gray-500 mb-6">
      {date && (
        <span class="inline-flex items-center gap-2">
          <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M8 2v4M16 2v4M3 10h18M21 20H3V6h18z"/>
          </svg>
          {date.toLocaleDateString('es-ES', {day:'2-digit', month:'long', year:'numeric'})}
        </span>
      )}
      {rt?.text && (
        <span class="inline-flex items-center gap-2">
          <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="10"/>
            <path d="M12 6v6l4 2"/>
          </svg>
          {rt.text.replace('min read', 'min de lectura')}
        </span>
      )}
    </div>
  )}

  {data?.cover && (
    <img 
      src={data.cover} 
      alt={data?.title || 'Imagen del artículo'} 
      class="w-full rounded-2xl shadow mb-8" 
      loading="lazy" 
      decoding="async" 
    />
  )}
</section>

<!-- Contenido con estilo tipo "prose" y callouts -->
<article class="container mx-auto px-4 pb-12">
  <div class="prose lg:prose-lg max-w-3xl">
    <Content />
  </div>
</article>

<style>
  .callout { 
    border-radius: 12px; 
    padding: 16px 18px; 
    margin: 16px 0; 
    border: 1px solid;
  }
  .callout-tip { 
    background: #ecfdf5; 
    border-color: #bbf7d0; 
    color: #065f46;
  } /* verde suave */
  .callout-solution { 
    background: #fffbeb; 
    border-color: #fde68a; 
    color: #92400e;
  } /* amarillo suave */
</style>